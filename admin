#!/usr/bin/env node

var _ = require('underscore')._,
    async = require('async'),
    bcrypt = require('bcrypt-nodejs'),
    fs = require('fs'),
    redis = require('redis');

var db = redis.createClient(),
    argv = process.argv.slice(2),
//  base64 regex from http://stackoverflow.com/a/18967082
    b64m = new RegExp("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})([=]{1,2})?$");

function setUser(name, password, admin) {
  var userHash = 'user:' + name,
      pHash = bcrypt.hashSync(password);

  db.hmset(userHash, ['password', pHash, 'admin', admin, 'inviteQuota', 20], function(err, reply) {
    if(!err) {
      console.log("User configured: " + name + " [admin=" + admin + "]");
    } else {
      console.log("Database error.")
    }
  });
}

function delUser(name) {
  var userHash = 'user:' + name,
      m = db.multi();

  m.del(userHash);
  m.del(userHash + ':public');
  m.del(userHash + ':private');

  m.exec(function(err, replies) {
    if(!err) {
      console.log("User deleted: " + argv[1]);
    } else {
      console.log("Database error.");
    }
  });
}

function setAdmin(name, state) {
  var userHash = 'user:' + name;
  db.hset(userHash, ['admin', state], function(err, reply) {
    if(!err) {
      console.log("User configured: " + name + " [admin=" + state + "]");
    } else {
      console.log(name + ": no such user");
    }
  });
}

function main() {
  if(_.has(process.env, 'ALSUTI_DATABASE')) {
    db.select(process.env.ALSUTI_DATABASE);
  }

  if(argv[0] == 'flush') {
    db.flushdb();
  }
  else if(argv[0] == 'setuser') {
    if(argv.length >= 3) {
      setUser(argv[1], argv[2], argv[3]);
    } else {
      console.log("Error: 'setuser' needs 2 arguments, " + (argv.length - 1) + " were given.");
    }
  }
  else if(argv[0] == 'deluser') {
    if(argv.length == 2) {
      delUser(argv[1]);
    } else {
      console.log("Error: 'deluser' needs 1 argument, " + (argv.length - 1) + " were given.");
    }
  }
  else if(argv[0] == 'setadmin') {
    if(argv.length == 3) {
      setAdmin(argv[1], argv[2]);
    } else {
      console.log("Error: 'setadmin' needs 2 arguments, " + (argv.length - 1) + " were given.");
    }
  }
  else if(argv[0] == 'mkdb') {
    var admin = null,
        password = null,
        _public = false;

    for(var i=1; i < argv.length; ++i) {
      if(argv[i].startsWith('admin=')) {
        admin = argv[i].split('=').slice(1).join();
      }
      else if(argv[i].startsWith('password=')) {
        password = argv[i].split('=').slice(1).join();
      }
      else if(argv[i] == 'public') {
        _public = true;
      }
    }

    if(admin == null || password == null) {
      console.log("Error: you must specify an administrator user and password.");
      console.log("Example: ./admin mkdb user=someone password=something");
    }
    else {
      setUser(admin, password, 'yes'); // add default admin user

      var slugs = fs.readdirSync('files').filter(function(slug) {
        return slug.startsWith(".") == false;
      });

      var uploads = slugs.map(function(slug) {
        var filePath = 'files/' + slug;
        return {
          'fileName': slug,
          'time': fs.statSync(filePath).mtime.getTime(),
          'encrypted': b64m.test(fs.readFileSync(filePath, 'utf-8').toString()),
        };
      }).sort(function(a,b) {
        return a.time - b.time;
      });

      for(var i=0; i < uploads.length; ++i) {
        var u = uploads[i],
            fileHash = 'file:' + u.fileName,
            settings = [];

        db.exists(fileHash, function(err, exists) {
          if(!err && exists == false) {
            db.hmset(fileHash,
              'user', admin,
              'time', u.time,
              'encrypted', u.encrypted ? 'true' : 'false',
              'public', _public
            );

            // push to user upload lists
            var userHash = 'user:' + admin;
            if(_public) {
              db.zadd('public', u.time, u.fileName);
              db.zadd(userHash + ':public', u.time, u.fileName);
            } else {
              db.zadd(userHash + ':private', u.time, u.fileName);
            }
          }
        });

        console.log(u.fileName + ": time=" + u.time.toString() + (u.encrypted ? ', encrypted' : ''));
      }
    }
  }

  db.quit();
}

main();
